# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Full Test

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.config.os }}
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      # Set up a matrix to run the following 2 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        config:
          - { os: ubuntu-24.04, build_type: "Release", c_compiler: "gcc", cpp_compiler: "g++", generator: "Ninja" }
          - { os: ubuntu-24.04, build_type: "Release", c_compiler: "clang-18", cpp_compiler: "clang++-18", generator: "Ninja" }
          - { os: windows-latest, build_type: "Release", c_compiler: "cl", cpp_compiler: "cl", generator: "\"Visual Studio 17 2022\"",
              extra_flags: "-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake" }

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Ubuntu dependencies
      if: matrix.config.os == 'ubuntu-24.04'
      run: |
       sudo apt-get install nlohmann-json3-dev graphviz doxygen ninja-build

    - name: Install Windows dependencies
      if: matrix.config.os == 'windows-latest'
      run: |
       choco install graphviz doxygen.install
       vcpkg install nlohmann-json

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.config.cpp_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
        -S ${{ github.workspace }}
        -G ${{ matrix.config.generator }}
        ${{ matrix.config.extra_flags }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake -j6 --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.config.build_type }}
    - name: Test
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.config.build_type }} --test-dir ${{ steps.strings.outputs.build-output-dir }} --output-on-failure